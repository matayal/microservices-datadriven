[{"id":0,"href":"/microservices-datadriven/mbaas/","title":"","parent":"","content":" Oracle Mobile Backend as a Service - Developer Preview Oracle Mobile Backend as a Service (MBaaS) allows developers to build and deploy mobile applications using Parse mobile APIs, and provision a backend as a service with the Oracle Database and other infrastructure components that operate on multiple clouds. This service vastly simplifies the task of building, testing, and operating a mobile app dev platform for reliable, secure, and scalable enterprise applications. This version includes an Oracle Database storage adapter for Parse (Parse already has MongoDB and Postgres adapters), and a proof of concept of Google Firebase APIs emulated using Parse APIs.\nThe MBaaS is based on the Parse Platform.\nIn addition to an Oracle Autonomus Database Shared instance, the following software components are deployed in an Oracle Cloud Infrastructure Container Engine for Kubernetes (OKE) for customer usage with Oracle MBaaS:\nParse Server, plus the Oracle Database storage adapter for Parse Parse Dashboard Interested in Spring Boot or microservices too? Check out Oracle Backend as a Service for Spring Cloud Developer Preview This release is a Developer Preview. This means that not all functionality is complete. In this release, approximately 80% of the Parse APIs are working. For interested developers, approximately 2100 of 2700 tests run successfully. This release is based on Parse Server version 5.2.7 and Parse Dashboard 5.0.0. We are releasing this as a developer preview to allow interested developers to try it and give feedback.\nThe following API families are mostly working:\nDatabase, including query Identity/Security File Caching GeoPoints Config Data The following API families are not expected to work in this release:\nCloud Functions GraphQL Live Query Push Notifications The Parse API exposed is exactly the same as an upstream Parse Server (version 5.2.7) - there are no changes to the public facing API. All existing Parse SDKs should work as-is with this developer preview (for those APIs that are working).\nAbout the Oracle Database storage adapter for Parse This developer preview includes an Oracle Database storage adapter for Parse based on the Parse Server 5.2.7 code line. The storage adapter is implemented using the Node.js node-oracledb library. Data are stored in the database in JSON collections, using the Simple Oracle Document Access (SODA) API.\n","description":"Oracle Mobile Backend as a Service - Developer Preview Oracle Mobile Backend as a Service (MBaaS) allows developers to build and deploy mobile applications using Parse mobile APIs, and provision a backend as a service with the Oracle Database and other infrastructure components that operate on multiple clouds. This service vastly simplifies the task of building, testing, and operating a mobile app dev platform for reliable, secure, and scalable enterprise applications."},{"id":1,"href":"/microservices-datadriven/mbaas/dashboard/","title":"Dashboard","parent":"","content":"The MBaaS installation includes a dashboard endpoint. The MBaaS Dashboard is a web user interface for managing your MBaaS applications.\nThe dashboard URL was provided to you at the end of setup, and you chose the administrative user name and password during install.\nTo log into the dashboard, go to the provided URL and login with the admin credentials.\nAfter you login, you will see the Landing Page which lists your applications. Most likely, you will just have to one application that you created during configuration of the MBaaS. You can click on the application to see details and manage it.\nNote the collections listed in the left hand pane. Click GameScore to see the data you created earlier.\n","description":"The MBaaS installation includes a dashboard endpoint. The MBaaS Dashboard is a web user interface for managing your MBaaS applications.\nThe dashboard URL was provided to you at the end of setup, and you chose the administrative user name and password during install.\nTo log into the dashboard, go to the provided URL and login with the admin credentials.\nAfter you login, you will see the Landing Page which lists your applications."},{"id":2,"href":"/microservices-datadriven/mbaas/getting-started/","title":"Getting Started","parent":"","content":"Once you have completed the setup of the MBaaS, you can use the examples in this section to get started.\nWorking with objects Using the dasbboard Users, Roles and ACLs ","description":"Once you have completed the setup of the MBaaS, you can use the examples in this section to get started.\nWorking with objects Using the dasbboard Users, Roles and ACLs "},{"id":3,"href":"/microservices-datadriven/mbaas/sample-apps/","title":"Sample Apps","parent":"","content":"This page provides details of the sample applications:\nWalking History is a React Native application that uses the database and GeoPoints APIs More coming soon!\n","description":"This page provides details of the sample applications:\nWalking History is a React Native application that uses the database and GeoPoints APIs More coming soon!"},{"id":4,"href":"/microservices-datadriven/mbaas/sample-apps/walking-history/","title":"Walking History","parent":"Sample Apps","content":"The Walking History sample application uses the Parse database and GeoPoints APIs. It is a React Native application that allows you to walk around New York City (or simulate that in a device emulator) and it will tell you about the closest attraction or \u0026ldquo;point of interest.\u0026rdquo;\nHere is what the Walking History app looks like running in the Android emulator:\nTry the sample To try this sample application you will need the following:\nAn instance of Oracle Mobile Backend as a Service deployed and running. Android Studio or XCode, with the device emulator. For Android, use API level 30 and Android 11 for compatibilty with the version of React Native used in the sample. NodeJS to run the React Native \u0026ldquo;metro\u0026rdquo; development server. Once you have the prerequisites, start by cloning the source code for the application:\ngit clone https://github.com/oracle/microservices-datadriven cd microservices-datadriven/mbaas-developer-preview/walking-history This directory contains the source code for the application.\nIn the source code, you need to update the file App.js to set the APPLICAITON_ID and server URL to match your environment. Find these lines and update those two values. Note that the required values were provided in the output at the end of the log for the stack apply job during the installation.\nconst App: () =\u0026gt; Node = () =\u0026gt; { const isDarkMode = useColorScheme() === \u0026#39;dark\u0026#39;; const Parse = require(\u0026#39;parse/react-native.js\u0026#39;); Parse.setAsyncStorage(AsyncStorage); Parse.initialize(\u0026#34;APPLICATION_ID\u0026#34;); // \u0026lt;-- update this Parse.serverURL = \u0026#39;http://1.2.3.4/parse\u0026#39;; // \u0026lt;-- update this Once you have made the updates, you can start the \u0026ldquo;metro\u0026rdquo; development server by running this command:\nnpx react-native start Note: The instructions below are for Android. If you are using iOS, do the equivalent steps in XCode.\nOpen the android sub-directory as a project in Android Studio. Create an emulator if you have not already (noting the specific version requirements above) and then click on the \u0026ldquo;Run\u0026rdquo; button (or choose \u0026ldquo;Run\u0026hellip;\u0026rdquo; from the \u0026ldquo;Run\u0026rdquo; menu) to start the application on the emulator.\nClick on the \u0026ldquo;\u0026hellip;\u0026rdquo; item in the emulator menu to open the \u0026ldquo;Extended Controls.\u0026rdquo; In the \u0026ldquo;Location\u0026rdquo; page create a new route from 33 Peck Slip, New York to 14 W 34th Street, New York. Set the playplack speed to 4x and click on the \u0026ldquo;Play Route\u0026rdquo; button. Your emulator will now silumate walking around New York City for several minutes.\nAs you \u0026ldquo;walk\u0026rdquo; around, you will see the application updates your location and the nearest point of interest will change.\nExplore the Parse API usage in the source code In addition to the Parse initialization in App.js you saw above, you may wish to review the file components\\Location.js which uses the Parse Query API and the GeoPoints API to find a list of points of interest that are near the current location of the device (emulator):\n// find the closest attraction and update the state console.log(\u0026#34;querying parse server for nearby attractions\u0026#34;); let query = new Parse.Query(\u0026#39;POI\u0026#39;); query.near(\u0026#39;location\u0026#39;, new Parse.GeoPoint(currentPosition.coords.latitude, currentPosition.coords.longitude)); let results = await query.find().catch(err =\u0026gt; console.log(\u0026#34;OOPS \u0026#34; + JSON.stringify(err))); ","description":"The Walking History sample application uses the Parse database and GeoPoints APIs. It is a React Native application that allows you to walk around New York City (or simulate that in a device emulator) and it will tell you about the closest attraction or \u0026ldquo;point of interest.\u0026rdquo;\nHere is what the Walking History app looks like running in the Android emulator:\nTry the sample To try this sample application you will need the following:"},{"id":5,"href":"/microservices-datadriven/mbaas/setup/","title":"Setup","parent":"","content":"The MBaaS is available to install from OCI Marketplace.\nPrerequisites You must meet the following prerequisites to use the MBaaS:\nAn OCI account in a tenancy with sufficient quota to create: An OCI Container Engine for Kubernetes cluster, plus a node pool with three worker nodes A VCN with at least two public IP\u0026rsquo;s available A public load balancer An Oracle Autonomous Database - Shared instance At least one free OCI Auth Token (note that the maximum is two per user) Setup To start installation:\nVisit the OCI Marketplace listing for MBaaS (see the image below) Log into OCI Console if requested Choose the target compartment Review and accept the terms and conditions Click on the \u0026ldquo;Launch Stack\u0026rdquo; button On the \u0026ldquo;Create Stack\u0026rdquo; page:\nModify the suggested name if desired Add a description or tags if desired Click on the \u0026ldquo;Next\u0026rdquo; button On the \u0026ldquo;Configure variables\u0026rdquo; page, in the \u0026ldquo;Backend as a Service\u0026rdquo; section (see image below):\nSet an application name if desired, if you do not, a randomized value will be generated. This will be the name of the Parse application Set an application ID if desired, if you do not, a randomized value will be generated. This will be the Parse APPLICATION_ID Set a server master key if desired, if you do not, a randomized value will be generated. This will the Parse MASTER_KEY Change the dashboard user name if desired, note that this is case-sensitive Provide a password for the dashboard user. Oracle recommends that you use a strong password In the \u0026ldquo;Control Plane Options\u0026rdquo; section, modify the CIDR if desired. Note that you will only be able to access the service from IP addresses in the specified CIDR.\nIn the \u0026ldquo;Node Pool\u0026rdquo; section you can customize the number of nodes and enable auto-scaling if desired.\nIn the \u0026ldquo;Load Balancers Options\u0026rdquo; section you can customize the load balancer shape and the CIDR for client access. For simple testing, Oracle recommends using the provided default values.\nIn the \u0026ldquo;Database Options\u0026rdquo; section you can customize the database shape and the CIDR for client access. Note that you will not be able to access Datbase Actions if you change the network access to \u0026ldquo;PRIVATE_ENDPOINT_ACCESS\u0026rdquo;\nOnce you have completed customization, click on the \u0026ldquo;Next\u0026rdquo; button.\nThe \u0026ldquo;Review\u0026rdquo; page is displayed, check your settings and then click on the \u0026ldquo;Create\u0026rdquo; button to create the \u0026ldquo;stack\u0026rdquo; and run the Terraform apply action to create all of the associated resources.\nYou can monitor the installation in the log. Installation takes approximately 20 minutes to complete. Most of this time is spent provisioning the Kubernetes cluster, its nodes, and the database.\nWhen the installation is finished, some important information will be included at the end of the log. You will need this information to access the newly created environment:\napplication_id = \u0026#34;COOLAPPV100\u0026#34; dashboard_password = \u0026lt;sensitive\u0026gt; dashboard_uri = \u0026#34;http://1.2.3.4\u0026#34; dashboard_user = \u0026#34;ADMIN\u0026#34; kubeconfig_cmd = \u0026#34;oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.iad.xxx --file $HOME/.kube/config --region us-ashburn-1 --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT\u0026#34; parse_endpoint = \u0026#34;1.2.3.4/parse\u0026#34; Next, move on the the Getting Started page to learn how to use the newly installed environment.\n","description":"The MBaaS is available to install from OCI Marketplace.\nPrerequisites You must meet the following prerequisites to use the MBaaS:\nAn OCI account in a tenancy with sufficient quota to create: An OCI Container Engine for Kubernetes cluster, plus a node pool with three worker nodes A VCN with at least two public IP\u0026rsquo;s available A public load balancer An Oracle Autonomous Database - Shared instance At least one free OCI Auth Token (note that the maximum is two per user) Setup To start installation:"},{"id":6,"href":"/microservices-datadriven/mbaas/uninstall/","title":"Uninstall","parent":"","content":"To remove the MBaaS, in the OCI Console main menu, navigate to \u0026ldquo;Developer Services\u0026rdquo; then \u0026ldquo;Resource Manager - Stacks\u0026rdquo;. Make sure you are in the correct region and compartment where you installed the MBaaS.\nClick on the link to open the detail view for the MBaaS instance and click on the \u0026ldquo;Destroy\u0026rdquo; button to clean up resources:\nThe destroy job takes about 20 minutes to complete. You should review the logs at the end to make sure it completed succesfully. If there were any errors, in most cases running the destroy job again will fix any issues.\n","description":"To remove the MBaaS, in the OCI Console main menu, navigate to \u0026ldquo;Developer Services\u0026rdquo; then \u0026ldquo;Resource Manager - Stacks\u0026rdquo;. Make sure you are in the correct region and compartment where you installed the MBaaS.\nClick on the link to open the detail view for the MBaaS instance and click on the \u0026ldquo;Destroy\u0026rdquo; button to clean up resources:\nThe destroy job takes about 20 minutes to complete. You should review the logs at the end to make sure it completed succesfully."},{"id":7,"href":"/microservices-datadriven/mbaas/database/","title":"Database Access","parent":"","content":"The MBaaS includes an Oracle Database storage adapter for Parse which allows Parse Server to use the Oracle Database. An instance of the Oracle Autonomous Database (Shared) is created during installation of the MBaaS.\nTo work with data in the database, you can use the Database Actions interface, which can be accessed from the OCI Console. The Oracle Database is created in the same compartments as Parse Server. In the OCI Console, navigate to Autonomous Database in the main menu and select the database with the Application Name you configured during install, with the suffix \u0026ldquo;DB\u0026rdquo;, for example \u0026ldquo;COOLAPPDB\u0026rdquo;.\nClick on the link to access the database details page, and then click on the \u0026ldquo;Database Actions\u0026rdquo; button:\nThis will open the Database Actions page, where you have access to many database functions, including the ability to work with the JSON Collections where your MBaaS data are stored.\nNote: If you are asked for credentials you can obtain them by connecting to the Kubernetes cluster and extracting the password from the Parse Server log using this command - you will need to use the correct name of the pod on your system, which will be different to this example. In the example output shown below, the user name is adam and the password is apple. You can use these credentials to log into Database Actions.\nuser@cloudshell:~ (us-ashburn-1)$ kubectl logs parse-server-646b97979-9pkq6 -n parse-server | grep databaseURI databaseURI: oracledb://adam:apple@MYMBAASAPPDB_TP Select the JSON tile to enter the JSON Console.\nAt startup, Parse Server creates a few collections including _Hooks, _SCHEMA and _User. The _SCHEMA collection is where the schema of other collections are defined.\nTwo schema entries are created in this collection during server boot, for _User and _Role as you can see in the image above.\nThe GameScore schema would have been created when you made the first POST request in the \u0026ldquo;Working with Objects\u0026rdquo; page. You can see the contents of the GameScore collection in the JSON database:\n","description":"The MBaaS includes an Oracle Database storage adapter for Parse which allows Parse Server to use the Oracle Database. An instance of the Oracle Autonomous Database (Shared) is created during installation of the MBaaS.\nTo work with data in the database, you can use the Database Actions interface, which can be accessed from the OCI Console. The Oracle Database is created in the same compartments as Parse Server. In the OCI Console, navigate to Autonomous Database in the main menu and select the database with the Application Name you configured during install, with the suffix \u0026ldquo;DB\u0026rdquo;, for example \u0026ldquo;COOLAPPDB\u0026rdquo;."},{"id":8,"href":"/microservices-datadriven/mbaas/firebase-emulation/extra/","title":"Extra Parse test code","parent":"Firebase API Emulation","content":"To test the Parse API direct access from the same page, let\u0026rsquo;s add a few lines of codes to the index.html to show four buttons to insert/get/update a Restaurant (minimum properties) in the same collection created from Firebase-on-Parse SDK. The application logic is in /parsef/example.js file.\nThe modified parts included in index.html become:\n\u0026lt;!--ORACLE--\u0026gt; \u0026lt;div style=\u0026#34;text-align: center\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;insertButton\u0026#34;\u0026gt;INSERT RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;createButton\u0026#34;\u0026gt;GET RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;updateButton\u0026#34;\u0026gt;SET RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;queryButton\u0026#34; \u0026gt;N° RESTAURANTS\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;!-- \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-app-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-auth-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-firestore-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/init.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;!--ORACLE--\u0026gt; \u0026lt;script src=\u0026#34;//unpkg.com/navigo@6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--ORACLE --\u0026gt; \u0026lt;script src=\u0026#34;/parsef/parsef.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://npmcdn.com/parse/dist/parse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; firebase.app().options.appKey=\u0026#34;COOLAPPV100\u0026#34;; Parse.initialize(firebase.app().options.appKey); Parse.serverURL = \u0026#34;http://localhost:1337/parse\u0026#34;; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/parsef/example.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- ORACLE--\u0026gt; Reloading the page should appear four new buttons. Behind these buttons there are Parse JS API calls for Insert/Get/Update, and still Firebase API to count how many restaurants are in the Parse database:\nClick in sequence:\nInsert Restaurant:\nGet Restaurant (Note: only Name and Category have been added):\nSet Restaurant:\nGet Restaurant (Note: that the additional field city has been added):\nIf you click on N° Restaurants you will get the size of restaurants based on a Firebase API calls.\n","description":"To test the Parse API direct access from the same page, let\u0026rsquo;s add a few lines of codes to the index.html to show four buttons to insert/get/update a Restaurant (minimum properties) in the same collection created from Firebase-on-Parse SDK. The application logic is in /parsef/example.js file.\nThe modified parts included in index.html become:\n\u0026lt;!--ORACLE--\u0026gt; \u0026lt;div style=\u0026#34;text-align: center\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;insertButton\u0026#34;\u0026gt;INSERT RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;createButton\u0026#34;\u0026gt;GET RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;updateButton\u0026#34;\u0026gt;SET RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;queryButton\u0026#34; \u0026gt;N° RESTAURANTS\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;!"},{"id":9,"href":"/microservices-datadriven/mbaas/firebase-emulation/","title":"Firebase API Emulation","parent":"","content":"The developer preview includes an example of Firebase API emulation.\nThe Firebase API emulation is implemented in a library called parsef. This library is alpha quality and provided only as a proof of concept for developers to experiment with.\nTo try the example explore the following pages:\nFriendly Eats tutorial Extra Parse test code More detailed information about what APIs are implemented in this example is available on this page:\nImplemented APIs ","description":"The developer preview includes an example of Firebase API emulation.\nThe Firebase API emulation is implemented in a library called parsef. This library is alpha quality and provided only as a proof of concept for developers to experiment with.\nTo try the example explore the following pages:\nFriendly Eats tutorial Extra Parse test code More detailed information about what APIs are implemented in this example is available on this page:"},{"id":10,"href":"/microservices-datadriven/mbaas/firebase-emulation/friendly-eats/","title":"Friendly Eats tutorial","parent":"Firebase API Emulation","content":"This is an example of porting a simple Firebase web application based on JavaScript Firebase API - version 8 and described in a public Tutorial to the Parse Platform leveraging an alpha quality JavaScript library included in this example.\nComplete the original tutorial first First, we recommend that you complete the original FriendlyEats tutorial instructions through to the end using Firebase.\nAdapt the code to use the Firebase API emulation After completing the tutorial, you have a functioning application. Next, you can adapt that application to use the developer preview of the Firebase API emulation using the following steps:\nOpen in a editor the file index.html in the directory /friendlyeats\nLook for the Firebase libraries imports:\n... \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-app-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-auth-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-firestore-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/init.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ... Comment out the Firebase imports and add the following imports and code in their place, as shown here. Change the COOLAPPV100 and serverURL to match your MBaaS/Parse Server environment:\n\u0026lt;!-- comment these out: \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-app-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-auth-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-firestore-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/init.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;script src=\u0026#34;//unpkg.com/navigo@6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- add this: --\u0026gt; \u0026lt;script src=\u0026#34;/parsef/parsef.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://npmcdn.com/parse/dist/parse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; firebase.app().options.appKey=\u0026#34;COOLAPPV100\u0026#34;; Parse.initialize(firebase.app().options.appKey); Parse.serverURL = \u0026#34;http://localhost:1337/parse\u0026#34;; \u0026lt;/script\u0026gt; The added lines do the following:\nThe Firebase API emulation library (called \u0026ldquo;parsef\u0026rdquo;) is included with this line:\n\u0026lt;script src=\u0026#34;/parsef/parsef.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; To enable the import, create a directory parsef under the project directory and copy the file parsef.js into it.\nThe Parse JavaScript SDK is included by this line:\n\u0026lt;script src=\u0026#34;https://npmcdn.com/parse/dist/parse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; To configure communication with the MBaaS/Parse platform, you must set your own APPLICATION_ID and Parse serverURL. This initial setup is done by these lines of code:\n\u0026lt;script\u0026gt; firebase.app().options.appKey=\u0026#34;COOLAPPV100\u0026#34;; Parse.initialize(firebase.app().options.appKey); Parse.serverURL = \u0026#34;http://localhost:1337/parse\u0026#34;; \u0026lt;/script\u0026gt; Change the code according to your actual Parse server URL and COOLAPPV100.\nRepeat the tutorial steps with Firebase API Emulation Repeat the original tutorial steps to load Restaurants and Ratings into the MBaaS/Parse Server and check if the original JavaScript demo application is still running without any other changes.\nStop and restart the Firebase CLI.\nReload the web page from http://127.0.0.1:5000\nClick on \u0026ldquo;ADD MOCK DATA\u0026rdquo; and wait until it finishes to add restaurants to Parse Server.\nClick on any restaurant. Notice that ratings are empty because the client is no longer asking for data from Firebase/Firestore.\nClick on \u0026ldquo;ADD MOCK RATINGS\u0026rdquo;. In a few seconds, you should see the list of ratings added. If not, close the page by clicking X on left up corner, and click again on the same restaurant to force a reload:\nThe + button on right up corner can be clicked on to add your own rating to the restaurant:\nNotice the list is updated after saving: Check the original sort and Filter functions. Choose \u0026ldquo;Ramen\u0026rdquo; as the \u0026ldquo;Category\u0026rdquo;: Notice the updated page after the filter is applied:\nNote: In this step, we don\u0026rsquo;t need to add an index definition to the collection as in the original tutorial, since this is done automatically in the MBaaS/Parse Server.\nYou can further test the sort functionalities by adding more reviews to other restaurants. This will allow you to see the number of reviews and average ratings.\n","description":"This is an example of porting a simple Firebase web application based on JavaScript Firebase API - version 8 and described in a public Tutorial to the Parse Platform leveraging an alpha quality JavaScript library included in this example.\nComplete the original tutorial first First, we recommend that you complete the original FriendlyEats tutorial instructions through to the end using Firebase.\nAdapt the code to use the Firebase API emulation After completing the tutorial, you have a functioning application."},{"id":11,"href":"/microservices-datadriven/mbaas/firebase-emulation/scope/","title":"Implemented APIs","parent":"Firebase API Emulation","content":"This developer preview of Firebase API emulation includes only the following Implemented classes/methods:\nclass Query where() orderBy() limit() get() onSnapshot() class CollectionReference add() orderBy() limit() onSnapshot() doc() get() where() class QueryDocumentSnapshot data() get() class DocumentReference get() collection() class QuerySnapshot forEach() class DocumentSnapshot data() class Firestore collection() runTransaction() class Transaction get() set() update() The diagram below shows relationships between these APIs:\n","description":"This developer preview of Firebase API emulation includes only the following Implemented classes/methods:\nclass Query where() orderBy() limit() get() onSnapshot() class CollectionReference add() orderBy() limit() onSnapshot() doc() get() where() class QueryDocumentSnapshot data() get() class DocumentReference get() collection() class QuerySnapshot forEach() class DocumentSnapshot data() class Firestore collection() runTransaction() class Transaction get() set() update() The diagram below shows relationships between these APIs:"},{"id":12,"href":"/microservices-datadriven/mbaas/cluster-access/","title":"Kubernetes Access","parent":"","content":"As an MBaaS user, it is expected that you probably won\u0026rsquo;t need to access the underlying infrastructure. However, if you do want to have a look around, here is how you can access the Kubernetes cluster where your MBaaS is running.\nThe MBaaS setup created a Kubernetes cluster where the server and dashboard components are deployment. At the end of setup, you were provided with a command to creating a Kubernetes configuration file to access that cluster.\nkubeconfig_cmd = \u0026#34;oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.iad.xxx --file $HOME/.kube/config --region us-ashburn-1 --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT\u0026#34; To use kubectl on your local machine, you will need to have the OCI CLI installed and configured.\nNote: The generated kubeconfig file will only work if you are using the DEFAULT profile in your OCI CLI configuration file. If you are using a different OCI CLI profile you must add --profile \u0026lt;NAME\u0026gt; to the command by editing the generated Kubernetes config file and add the following lines:\n- --profile - MAACLOUD For example:\n- name: user-xxxx user: exec: apiVersion: client.authentication.k8s.io/v1beta1 args: - ce - cluster - generate-token - --cluster-id - ocid1.cluster....xxxx - --region - us-ashburn-1 - --profile - YOUR_PROFILE_NAME command: oci Using OCI Cloud Shell A simple alternative is to use the OCI Cloud Shell, which is provided in the OCI Console. You can open Cloud Shell by clicking Developer Tools in the upper right hand corner of the OCI Console.\nRun the provided command to create your Kubernetes configuration file and then you will be able to access the Kubernetes cluster. For example, you can list the pods in your cluster:\nWelcome to Oracle Cloud Shell. Update: Cloud Shell will now use Oracle JDK 11 by default. To change this, see Managing Language Runtimes in the Cloud Shell documentation. Your Cloud Shell machine comes with 5GB of storage for your home directory. Your Cloud Shell (machine and home directory) are located in: US East (Ashburn). You are using Cloud Shell in tenancy xxxx as an OCI user xxxx Type `help` for more info. user@cloudshell:~ (us-ashburn-1)$ oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.iad.xxx --file $HOME/.kube/config --region us-ashburn-1 --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT Existing Kubeconfig file found at /home/user/.kube/config and new config merged into it user@cloudshell:~ (us-ashburn-1)$ kubectl get pods -A NAMESPACE NAME READY STATUS RESTARTS AGE ingress-nginx ingress-nginx-controller-7d45557d5c-bqwwp 1/1 Running 0 4h18m ingress-nginx ingress-nginx-controller-7d45557d5c-klgnb 1/1 Running 0 4h18m ingress-nginx ingress-nginx-controller-7d45557d5c-l4d2m 1/1 Running 0 4h18m kube-system coredns-746957c9c6-hwnm8 1/1 Running 0 4h27m kube-system csi-oci-node-kqf5x 1/1 Running 0 4h23m kube-system kube-dns-autoscaler-6f789cfb88-7mptd 1/1 Running 0 4h27m kube-system kube-flannel-ds-hb6ld 1/1 Running 1 (4h22m ago) 4h23m kube-system kube-proxy-v5qwm 1/1 Running 0 4h23m kube-system proxymux-client-vpnh7 1/1 Running 0 4h23m parse-dashboard kaniko 0/1 Completed 0 4h19m parse-dashboard parse-dashboard-58cb567ffd-frc4x 1/1 Running 0 4h19m parse-server kaniko 0/1 Completed 0 4h20m parse-server parse-server-646b97979-9pkq6 1/1 Running 0 4h19m user@cloudshell:~ (us-ashburn-1)$ The MBaaS Parse Server is running in the parse-server namespace and Parse Dashboard is running in the parse-dashboard namespace.\n","description":"As an MBaaS user, it is expected that you probably won\u0026rsquo;t need to access the underlying infrastructure. However, if you do want to have a look around, here is how you can access the Kubernetes cluster where your MBaaS is running.\nThe MBaaS setup created a Kubernetes cluster where the server and dashboard components are deployment. At the end of setup, you were provided with a command to creating a Kubernetes configuration file to access that cluster."},{"id":13,"href":"/microservices-datadriven/mbaas/tags/","title":"Tags","parent":"","content":"","description":""},{"id":14,"href":"/microservices-datadriven/mbaas/getting-started/dashboard/","title":"Using the MBaaS Dashboard","parent":"Getting Started","content":"The MBaaS includes a web user interface for managing your applications, to learn more see the dashboard page.\n","description":"The MBaaS includes a web user interface for managing your applications, to learn more see the dashboard page."},{"id":15,"href":"/microservices-datadriven/mbaas/getting-started/objects/","title":"Working with Objects","parent":"Getting Started","content":"The MBaaS stores your data in objects, each object is an instance of a named class. A class has certain properties, or fields. You create a class by just creating the first object in that class. You define the fields by just using them. Once a class has a field with a certain type, you cannot change that field type while objects using it exist.\nCreating an object The most basic operation you can do is to create a new object in the database. The examples on this page use the REST API to access the MBaaS server. To create an object, you perform an HTTP POST to the MBaaS endpoint /parse/classes/ and append the name of the class of object you want to create, in this example the object is a GameScore. The content is provided in JSON format. You need to provide the correct APPLICATION_ID and update the endpoint address to match your environment:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;score\u0026#34;:100000,\u0026#34;playerName\u0026#34;:\u0026#34;test user\u0026#34;,\u0026#34;cheatmode\u0026#34;:false}\u0026#39; \\ http://1.2.3.4/parse/classes/GameScore This command will create an entry for GameScore in the Schema collection and will create/update the GameScore collection with your new object. It will return the objectId for the newly created object:\n{\u0026#34;objectId\u0026#34;:\u0026#34;Ts9B8JSBBX\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T14:47:28.431Z\u0026#34;} objectId is the unique identifier for the a document in the collection.\nRetrieving an object To retrieve the newly created object, use the HTTP GET API as shown below. Append the objectId to the end of the URL. As above, update the command with your APPLICATION_ID and endpoint address:\ncurl -X GET \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/Ts9B8JSBBX # output (formatted): { \u0026#34;score\u0026#34;:100000, \u0026#34;playerName\u0026#34;:\u0026#34;test user\u0026#34;, \u0026#34;cheatmode\u0026#34;:false, \u0026#34;updatedAt\u0026#34;:\u0026#34;2022-12-12T14:47:28.431Z\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T14:47:28.431Z\u0026#34;, \u0026#34;objectId\u0026#34;:\u0026#34;Ts9B8JSBBX\u0026#34; } Note: You can use any arbitrary string as your APPLICATION_ID. These will be used by your clients to authenticate with the Parse Server. During creation of the MBaaS environment, you provided an Application ID as a configuration option. If any call to the MBaaS Server does not use a valid Application ID, the call will be rejected with this error message:\n{\u0026#34;error\u0026#34;:\u0026#34;unauthorized\u0026#34;} More information Learn more about working with objects in the Parse Server documentation.\n","description":"The MBaaS stores your data in objects, each object is an instance of a named class. A class has certain properties, or fields. You create a class by just creating the first object in that class. You define the fields by just using them. Once a class has a field with a certain type, you cannot change that field type while objects using it exist.\nCreating an object The most basic operation you can do is to create a new object in the database."},{"id":16,"href":"/microservices-datadriven/mbaas/getting-started/identity/","title":"Working with Users, Roles and ACLs","parent":"Getting Started","content":" Creating Users You can create a user with this REST API. You must provide the correct APPLICATION_ID and endpoint for your environment:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Revocable-Session: 1\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;newuser\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;newpassword\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;415-392-0202\u0026#34;}\u0026#39; \\ http://1.2.3.4/parse/users # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;DrIxj80hAf\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T18:11:18.497Z\u0026#34;, \u0026#34;sessionToken\u0026#34;:\u0026#34;r:6cad2f1fcd7de36e68ed86e3d215d324\u0026#34; } Note: Email Server integration is not available in this developer preview. Verifying email and Password Reset functionality is not supported at this time.\nLearn more about users in the Parse Server documentation\nCreating Roles You can create a role with this REST API. You must provide the correct APPLICATION_ID and endpoint for your environment:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;Moderators\u0026#34;,\u0026#34;ACL\u0026#34;: {\u0026#34;*\u0026#34;: {\u0026#34;read\u0026#34;: true}}}\u0026#39; \\ http://1.2.3.4/parse/roles # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;otUtMWXca3\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T18:46:27.341Z\u0026#34; } Learn more about roles in the Parse Server documentation\nUsing Access Control Lists Parse ACLs are implemented as part of the API and can be specified on most requests.\nThe following examples will use the GameScore collection you created earlier. Also, the examples will focus on delete which requires the write permission.\nLearn more about ACLs in the Parse Server documentation\nGame Score with no ACLs Create a GameScore document:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;playerName\u0026#34;:\u0026#34;Mom Staples\u0026#34;,\u0026#34;cheatmode\u0026#34;:false, \u0026#34;score\u0026#34;:25}\u0026#39; \\ http://1.2.3.4/parse/classes/GameScore # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;BLxUYqfh6E\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-23T13:48:08.834Z\u0026#34; } This creates a Document like this:\n{ \u0026#34;playerName\u0026#34;: \u0026#34;Mom Staples\u0026#34;, \u0026#34;cheatmode\u0026#34;: false, \u0026#34;score\u0026#34;: 25, \u0026#34;updatedAt\u0026#34;: \u0026#34;2022-09-23T13:48:08.834Z\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2022-09-23T13:48:08.834Z\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;BLxUYqfh6E\u0026#34; } Note that no ACLs are associated with this object.\nDelete GameScore with no ACL\ncurl -X DELETE \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/BLxUYqfh6E # output {} The document is deleted. You can verify this using the GET API, the dashboard, or looking in the JSON collection in the database.\nGame Score with User ACL Create a GameScore document with a specific user that has read/write access\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore \\ --data-binary @- \u0026lt;\u0026lt; EOF { \u0026#34;playerName\u0026#34;:\u0026#34;Pop Staples\u0026#34;, \u0026#34;cheatmode\u0026#34;:false, \u0026#34;score\u0026#34;:2500, \u0026#34;ACL\u0026#34;: { \u0026#34;*\u0026#34;: { \u0026#34;read\u0026#34;: true }, \u0026#34;E3t4Iid6XN\u0026#34;: { \u0026#34;read\u0026#34; :true, \u0026#34;write\u0026#34;: true } } } EOF # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;9xTZkqjTwB\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-23T13:55:58.787Z\u0026#34; } This creates a Document like this:\n{ \u0026#34;playerName\u0026#34;: \u0026#34;Pop Staples\u0026#34;, \u0026#34;cheatmode\u0026#34;: false, \u0026#34;score\u0026#34;: 2500, \u0026#34;updatedAt\u0026#34;: \u0026#34;2022-09-23T13:55:58.787Z\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2022-09-23T13:55:58.787Z\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;9xTZkqjTwB\u0026#34;, \u0026#34;_wperm\u0026#34;: [ \u0026#34;E3t4Iid6XN\u0026#34; ], \u0026#34;_rperm\u0026#34;: [ \u0026#34;*\u0026#34;, \u0026#34;E3t4Iid6XN\u0026#34; ], \u0026#34;_acl\u0026#34;: { \u0026#34;E3t4Iid6XN\u0026#34;: { \u0026#34;w\u0026#34;: true, \u0026#34;r\u0026#34;: true }, \u0026#34;*\u0026#34;: { \u0026#34;r\u0026#34;: true } } } Note: specifying an ACL creates the internal _rperm and _wperm. These are not accessible through the API and are Parse internal implementation data.\nDelete a GameScore document with a specific user that has read/write access.\nTo delete a document that has ACLls, a caller needs to specify the session token that is obtained by logging in:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Revocable-Session: 1\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;nyg\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;password\u0026#34;}\u0026#39; \\ http://1.2.3.4/parse/login # output (formatted): { \u0026#34;username\u0026#34;:\u0026#34;nyg\u0026#34;, \u0026#34;phone\u0026#34;:\u0026#34;111-111-1111\u0026#34;, \u0026#34;updatedAt\u0026#34;:\u0026#34;2022-09-21T15:06:49.526Z\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-21T15:06:49.526Z\u0026#34;, \u0026#34;objectId\u0026#34;:\u0026#34;E3t4Iid6XN\u0026#34;, \u0026#34;ACL\u0026#34;:{ \u0026#34;*\u0026#34;:{ \u0026#34;read\u0026#34;:true }, \u0026#34;E3t4Iid6XN\u0026#34;:{ \u0026#34;read\u0026#34;:true, \u0026#34;write\u0026#34;:true } }, \u0026#34;sessionToken\u0026#34;:\u0026#34;r:e8256f575a826b64a91a18d6ad21911b\u0026#34; } As you can see, user nyg has id E3t4Iid6XN which matches the _wperm in the document.\nTo delete the document, use the DELETE API with the sessionToken associated with the user:\ncurl -X DELETE \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Session-Token: r:9431c553bb56f21c0a2853b18b5df37d\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/9xTZkqjTwB # output {} Game Score with Roles ACL Roles work in a similar fashion to Users. It is assumed that, for this example, the User bruce has been associated with Role Admins.\nCreate a GameScore document with a specific role that has read/write access:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore \\ --data-binary @- \u0026lt;\u0026lt; EOF { \u0026#34;playerName\u0026#34;:\u0026#34;Aaron Judge\u0026#34;, \u0026#34;cheatmode\u0026#34;:false, \u0026#34;score\u0026#34;:64, \u0026#34;ACL\u0026#34;: { \u0026#34;*\u0026#34;: { \u0026#34;read\u0026#34;: true }, \u0026#34;role:Admins\u0026#34;: { \u0026#34;read\u0026#34; :true, \u0026#34;write\u0026#34;: true } } } EOF # output (formatted) { \u0026#34;objectId\u0026#34;:\u0026#34;LkTqWJKWw1\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-23T17:39:20.115Z\u0026#34; } This creates a Document like this:\n{ \u0026#34;playerName\u0026#34;: \u0026#34;Aaron Judge\u0026#34;, \u0026#34;cheatmode\u0026#34;: false, \u0026#34;score\u0026#34;: 64, \u0026#34;updatedAt\u0026#34;: \u0026#34;2022-09-23T17:39:20.115Z\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2022-09-23T17:39:20.115Z\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;LkTqWJKWw1\u0026#34;, \u0026#34;_wperm\u0026#34;: [ \u0026#34;role:Admins\u0026#34; ], \u0026#34;_rperm\u0026#34;: [ \u0026#34;*\u0026#34;, \u0026#34;role:Admins\u0026#34; ], \u0026#34;_acl\u0026#34;: { \u0026#34;role:Admins\u0026#34;: { \u0026#34;w\u0026#34;: true, \u0026#34;r\u0026#34;: true }, \u0026#34;*\u0026#34;: { \u0026#34;r\u0026#34;: true } } } To delete this document, a caller must get the session token for a user that has Admins role by logging in:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Revocable-Session: 1\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;bruce\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;password\u0026#34;}\u0026#39; \\ http://1.2.3.4/parse/login # output (formatted) { \u0026#34;username\u0026#34;:\u0026#34;bruce\u0026#34;, \u0026#34;phone\u0026#34;:\u0026#34;222-222-2222\u0026#34;, \u0026#34;updatedAt\u0026#34;:\u0026#34;2022-09-21T16:26:32.948Z\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-21T16:26:32.948Z\u0026#34;, \u0026#34;objectId\u0026#34;:\u0026#34;tE8wEhXmJg\u0026#34;, \u0026#34;ACL\u0026#34;: { \u0026#34;*\u0026#34;: { \u0026#34;read\u0026#34;:true }, \u0026#34;tE8wEhXmJg\u0026#34;:{ \u0026#34;read\u0026#34;:true, \u0026#34;write\u0026#34;:true } }, \u0026#34;sessionToken\u0026#34;:\u0026#34;r:9805595b4a73c8d2135ae9e70bb885c6\u0026#34; } The session token must be supplied in the DELETE API call:\ncurl -X DELETE \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Session-Token: r:9805595b4a73c8d2135ae9e70bb885c6\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/LkTqWJKWw1 # output {} Using the Master Key Note: Oracle does not recommended using the master key to avoid ACLs\nUsing the Master Key in an API call turns off all ACL checking, for example:\ncurl -X DELETE \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Master-Key: MASTER_KEY\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/BLxUYqfh6E # output: {} This call will delete the specified document regardless of any ACLs present.\n","description":"Creating Users You can create a user with this REST API. You must provide the correct APPLICATION_ID and endpoint for your environment:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Revocable-Session: 1\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;newuser\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;newpassword\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;415-392-0202\u0026#34;}\u0026#39; \\ http://1.2.3.4/parse/users # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;DrIxj80hAf\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T18:11:18.497Z\u0026#34;, \u0026#34;sessionToken\u0026#34;:\u0026#34;r:6cad2f1fcd7de36e68ed86e3d215d324\u0026#34; } Note: Email Server integration is not available in this developer preview. Verifying email and Password Reset functionality is not supported at this time."}]